{"ast":null,"code":"var _jsxFileName = \"/Users/wonki/coding/test/redux-toolkit-tutorial/src/components/ToDo/ToDoComponent.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addList, getList } from \"../../store/TodoReducer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ToDoComponent() {\n  _s();\n\n  const [inputValue, setInputValue] = useState(\"\");\n  const dispatch = useDispatch();\n  const {\n    loading,\n    error,\n    list\n  } = useSelector(state => ({\n    loading: state.todoReducer.loading,\n    error: state.todoReducer.error,\n    list: state.todoReducer.list\n  }));\n\n  if (loading === \"pending\") {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\uBD88\\uB7EC\\uC624\\uB294\\uC911\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 12\n    }, this);\n  }\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"\\uC694\\uCCAD\\uC5D0\\uB7EC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => dispatch(getList()),\n        children: \"\\uC7AC\\uC694\\uCCAD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => dispatch(getList()),\n      children: \"\\uB9AC\\uC2A4\\uD2B8 \\uC694\\uCCAD\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), list.map((ele, index) => {\n      let id = (ele === null || ele === void 0 ? void 0 : ele.id) || \"\";\n      let content = (ele === null || ele === void 0 ? void 0 : ele.content) || \"\";\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"id:\", id, \" - \", content]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"input\", {\n      value: inputValue,\n      onChange: e => {\n        let value = e.target.value;\n        setInputValue(value);\n      },\n      children: \" \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => dispatch(addList()),\n      children: \"\\uCD94\\uAC00\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ToDoComponent, \"0tZML99iQUax+/hwTNrsTg75PHE=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = ToDoComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"ToDoComponent\");","map":{"version":3,"sources":["/Users/wonki/coding/test/redux-toolkit-tutorial/src/components/ToDo/ToDoComponent.tsx"],"names":["React","useState","useDispatch","useSelector","addList","getList","ToDoComponent","inputValue","setInputValue","dispatch","loading","error","list","state","todoReducer","map","ele","index","id","content","e","value","target"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAA2C,OAA3C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,OAAT,EAAkBC,OAAlB,QAAiC,yBAAjC;;AACA,eAAe,SAASC,aAAT,GAAyB;AAAA;;AACtC,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BP,QAAQ,CAAC,EAAD,CAA5C;AAEA,QAAMQ,QAAQ,GAAGP,WAAW,EAA5B;AACA,QAAM;AAAEQ,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BT,WAAW,CAAEU,KAAD,KAAiB;AAC5DH,IAAAA,OAAO,EAAEG,KAAK,CAACC,WAAN,CAAkBJ,OADiC;AAE5DC,IAAAA,KAAK,EAAEE,KAAK,CAACC,WAAN,CAAkBH,KAFmC;AAG5DC,IAAAA,IAAI,EAAEC,KAAK,CAACC,WAAN,CAAkBF;AAHoC,GAAjB,CAAD,CAA5C;;AAKA,MAAIF,OAAO,KAAK,SAAhB,EAA2B;AACzB,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,MAAIC,KAAJ,EAAW;AACT,wBACE,QAAC,KAAD,CAAO,QAAP;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAQ,QAAA,OAAO,EAAE,MAAMF,QAAQ,CAACJ,OAAO,EAAR,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAMD;;AACD,sBACE;AAAA,4BACE;AAAQ,MAAA,OAAO,EAAE,MAAMI,QAAQ,CAACJ,OAAO,EAAR,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEGO,IAAI,CAACG,GAAL,CAAS,CAACC,GAAD,EAAWC,KAAX,KAA6B;AACrC,UAAIC,EAAE,GAAG,CAAAF,GAAG,SAAH,IAAAA,GAAG,WAAH,YAAAA,GAAG,CAAEE,EAAL,KAAW,EAApB;AACA,UAAIC,OAAO,GAAG,CAAAH,GAAG,SAAH,IAAAA,GAAG,WAAH,YAAAA,GAAG,CAAEG,OAAL,KAAgB,EAA9B;AACA,0BACE;AAAA,0BACMD,EADN,SACaC,OADb;AAAA,SAAUF,KAAV;AAAA;AAAA;AAAA;AAAA,cADF;AAKD,KARA,CAFH,eAYE;AACE,MAAA,KAAK,EAAEV,UADT;AAEE,MAAA,QAAQ,EAAGa,CAAD,IAAO;AACf,YAAIC,KAAK,GAAGD,CAAC,CAACE,MAAF,CAASD,KAArB;AACAb,QAAAA,aAAa,CAACa,KAAD,CAAb;AACD,OALH;AAAA,gBAOG;AAPH;AAAA;AAAA;AAAA;AAAA,YAZF,eAsBE;AAAQ,MAAA,OAAO,EAAE,MAAMZ,QAAQ,CAACL,OAAO,EAAR,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAtBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA0BD;;GA/CuBE,a;UAGLJ,W,EACgBC,W;;;KAJXG,a","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addList, getList } from \"../../store/TodoReducer\";\nexport default function ToDoComponent() {\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const dispatch = useDispatch();\n  const { loading, error, list } = useSelector((state: any) => ({\n    loading: state.todoReducer.loading,\n    error: state.todoReducer.error,\n    list: state.todoReducer.list,\n  }));\n  if (loading === \"pending\") {\n    return <div>불러오는중</div>;\n  }\n\n  if (error) {\n    return (\n      <React.Fragment>\n        <div>요청에러</div>\n        <button onClick={() => dispatch(getList())}>재요청</button>\n      </React.Fragment>\n    );\n  }\n  return (\n    <div>\n      <button onClick={() => dispatch(getList())}>리스트 요청</button>\n      {list.map((ele: any, index: number) => {\n        let id = ele?.id || \"\";\n        let content = ele?.content || \"\";\n        return (\n          <div key={index}>\n            id:{id} - {content}\n          </div>\n        );\n      })}\n\n      <input\n        value={inputValue}\n        onChange={(e) => {\n          let value = e.target.value;\n          setInputValue(value);\n        }}\n      >\n        {\" \"}\n      </input>\n\n      <button onClick={() => dispatch(addList())}>추가</button>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}